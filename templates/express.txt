'use strict'

var express = require('express');
var bodyParser = require('body-parser');
var jsen = require('jsen');

//TODO: You need to supply the repository, this fake one is here so that you'll be able to build
var repository = {

    //Regarding all methods. Any error object with a {status: num} property will be 
    //used to communicate that specific error code to through the REST api
    //All methods should return a promise. If you Promise.catch errors be sure to rethrow something 
    //otherwise the error will not propogate
    
    //At the end of this file there is an error handler. You can use this to handle errors however you want
    //Pass it on to another handler in parent route, or leave it as is
    
    //If you want null to be a 404 you should do a:
    //  throw { status: 404, error: 'Not Found'} or reject({ ... })
    
    //Filter is optional and is merely passed through. Add your own validation/tokenization that 
    //makes sense with your usecase
    list: function(filter) { return Promise.reject('not yet implemented'); },
    
    get: function(id) { return Promise.reject('not yet implemented'); },
    
    create: function(obj) { return Promise.reject('not yet implemented'); },
    
    update: function(id, obj) { return Promise.reject('not yet implemented'); },
    
    delete: function(id) { return Promise.reject('not yet implemented'); }
};

//var repository = require('./<%=slug %>-repository'); 

/*
Example Model:

<%=exampleModel %>
*/

var router = express.Router();

// Automatically parse request body as JSON
router.use(bodyParser.json());

router.get('/<%=slug %>', function(req, res, next) {
    
    repository.list(req.params)
        .then(res => res.json(res))
        .catch(next);
});

router.get('/<%=slug %>/:id', function(req, res, next) {
    
    if(!req.params.id) {
        next({ status: 400, error: 'Id is required' });
    }
    
    repository.get(req.params.id)
        .then(res => res.json(res))
        .catch(next);
    
});

router.post('/<%=slug %>', function(req, res, next) {
    
    if(!req.params.id) {
        next({ status: 400, error: 'Id is required' });
    }
    
    validateModel(req.body)
        .then(m => repository.get(m))
        .then(res => res.json(res))
        .catch(next);
    
});

//With this you could have the body contain the id or leave it in the get request for the sake of 
//semantics. Repository will get both id and body.
router.put('/<%=slug %>/:id', function(req, res, next) {
    
    if(!req.params.id) {
        next({ status: 400, error: 'Id is required' });
    }
    
    validateUpdateModel(req.body)
        .then(m => repository.get(m))
        .then(res => res.json(res))
        .catch(next);
    
});

router.delete('/<%=slug %>/:id', function(req, res, next) {
    
    if(!req.params.id) {
        next({ status: 400, error: 'Id is required' });
    }
    
    repository.delete(req.params.id)
        .then(res => res.json(res))
        .catch(next);
});

router.use(function (err, req, res, next) {
    res.status(err.status || 500).json(err);
});

module.exports = router;

const schema = <%=schema %>;

function validateModel(obj) {
    
    return new Promise(function(resolve, reject) {
        try {
            var validate = jsen(schema);
        
            if(!validate(obj)) {
                reject({ status: 400, error: validate.errors });
            }
            
            return validate.build(obj, { additionalProperties: false });
        } catch (ex) {
            reject(ex);
        }
    });
}

function validateUpdateModel(obj) {
    return new Promise(function(resolve, reject) {
        try {
            var validate = jsen(schema);
            
            if(!validate(obj)) {
                reject({ status: 400, error: validate.errors });
            }
            
            var ret = validate.build(obj, { additionalProperties: false });
            
            //the above is just a convenience to remove properties that shouldn't be on the object.... 
            //now also remove any that weren't on the input object
            Object.keys(ret).forEach(function(key,index) {
                if(!obj.hasOwnProperty(key)) {
                    delete ret[key];
                }
            });
            
            return ret;
        } catch (ex) {
            reject(ex);
        }
    });
}
