module.exports = function(obj){
var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};
with(obj||{}){
__p+='\'use strict\'\n\nvar express = require(\'express\');\nvar bodyParser = require(\'body-parser\');\nvar jsen = require(\'jsen\');\n\n//TODO: You need to supply the repository, this fake one is here so that you\'ll be able to build\nvar repository = {\n\n    //Regarding all methods. Any error object with a {status: num} property will be \n    //used to communicate that specific error code to through the REST api\n    //All methods should return a promise. If you Promise.catch errors be sure to rethrow something \n    //otherwise the error will not propogate\n    \n    //At the end of this file there is an error handler. You can use this to handle errors however you want\n    //Pass it on to another handler in parent route, or leave it as is\n    \n    //If you want null to be a 404 you should do a:\n    //  throw { status: 404, error: \'Not Found\'} or reject({ ... })\n    \n    //Filter is optional and is merely passed through. Add your own validation/tokenization that \n    //makes sense with your usecase\n    list: function(filter) { return Promise.reject(\'not yet implemented\'); },\n    \n    get: function(id) { return Promise.reject(\'not yet implemented\'); },\n    \n    create: function(obj) { return Promise.reject(\'not yet implemented\'); },\n    \n    update: function(id, obj) { return Promise.reject(\'not yet implemented\'); },\n    \n    delete: function(id) { return Promise.reject(\'not yet implemented\'); }\n};\n\n//var repository = require(\'./'+
((__t=(slug ))==null?'':__t)+
'-repository\'); \n\n/*\nExample Model:\n\n'+
((__t=(exampleModel ))==null?'':__t)+
'\n*/\n\nvar router = express.Router();\n\n// Automatically parse request body as JSON\nrouter.use(bodyParser.json());\n\nrouter.get(\'/'+
((__t=(slug ))==null?'':__t)+
'\', function(req, res, next) {\n    \n    repository.list(req.params)\n        .then(res => res.json(res))\n        .catch(next);\n});\n\nrouter.get(\'/'+
((__t=(slug ))==null?'':__t)+
'/:id\', function(req, res, next) {\n    \n    if(!req.params.id) {\n        next({ status: 400, error: \'Id is required\' });\n    }\n    \n    repository.get(req.params.id)\n        .then(res => res.json(res))\n        .catch(next);\n    \n});\n\nrouter.post(\'/'+
((__t=(slug ))==null?'':__t)+
'\', function(req, res, next) {\n    \n    if(!req.params.id) {\n        next({ status: 400, error: \'Id is required\' });\n    }\n    \n    validateModel(req.body)\n        .then(m => repository.get(m))\n        .then(res => res.json(res))\n        .catch(next);\n    \n});\n\n//With this you could have the body contain the id or leave it in the get request for the sake of \n//semantics. Repository will get both id and body.\nrouter.put(\'/'+
((__t=(slug ))==null?'':__t)+
'/:id\', function(req, res, next) {\n    \n    if(!req.params.id) {\n        next({ status: 400, error: \'Id is required\' });\n    }\n    \n    validateUpdateModel(req.body)\n        .then(m => repository.get(m))\n        .then(res => res.json(res))\n        .catch(next);\n    \n});\n\nrouter.delete(\'/'+
((__t=(slug ))==null?'':__t)+
'/:id\', function(req, res, next) {\n    \n    if(!req.params.id) {\n        next({ status: 400, error: \'Id is required\' });\n    }\n    \n    repository.delete(req.params.id)\n        .then(res => res.json(res))\n        .catch(next);\n});\n\nrouter.use(function (err, req, res, next) {\n    res.status(err.status || 500).json(err);\n});\n\nmodule.exports = router;\n\nconst schema = '+
((__t=(schema ))==null?'':__t)+
';\n\nfunction validateModel(obj) {\n    \n    return new Promise(function(resolve, reject) {\n        try {\n            var validate = jsen(schema);\n        \n            if(!validate(obj)) {\n                reject({ status: 400, error: validate.errors });\n            }\n            \n            return validate.build(obj, { additionalProperties: false });\n        } catch (ex) {\n            reject(ex);\n        }\n    });\n}\n\nfunction validateUpdateModel(obj) {\n    return new Promise(function(resolve, reject) {\n        try {\n            var validate = jsen(schema);\n            \n            if(!validate(obj)) {\n                reject({ status: 400, error: validate.errors });\n            }\n            \n            var ret = validate.build(obj, { additionalProperties: false });\n            \n            //the above is just a convenience to remove properties that shouldn\'t be on the object.... \n            //now also remove any that weren\'t on the input object\n            Object.keys(ret).forEach(function(key,index) {\n                if(!obj.hasOwnProperty(key)) {\n                    delete ret[key];\n                }\n            });\n            \n            return ret;\n        } catch (ex) {\n            reject(ex);\n        }\n    });\n}\n';
}
return __p;
}